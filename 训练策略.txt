# coding=utf-8
#这篇博客里面提出了包括：

#1、全局语境界 推荐指数：￥￥
## 这一技巧在ResNet的工作[3]中提出，做法是把整张图片作为一个RoI，对其进行RoI Pooling并将得到的feature vector拼接于每个RoI的feature vector上，
## 作为一种辅助信息传入之后的R-CNN子网络。目前，也有把相邻尺度上的RoI互相作为context共同传入的做法。

#2、数据增强 推荐指数：￥￥￥￥

#3、多尺度训练/测试 推荐指数：￥￥￥￥￥
##  问题分析：基础网络部分通常会生成比原图小数十倍的特征图，
##  导致小物体的特征描述不容易被检测网络捕捉，通过输入更大更多尺度的图片进行训练，
##  能够在一定程度上提高检测模型对物体大小的鲁棒性。
##  多尺度训练：在训练阶段，预先定义几个固定的尺度，每个epoch随机选择一个尺度进行训练。
##  度尺度测试：在测试阶段，生成几个不同尺度的feature map，对每个Region Proposal，
##  在不同feature map上也有不同的尺度，我们选择最接近某一固定尺度的Region Proposal作为后续输入。
##  举例：YOLOv2中就有使用多尺度训练。作者在论文中说明，为了提升模型的鲁棒性，在训练的过程中每隔10个batches就随机的从{320,352，...，608}，
##      步长为32的集合中选择一个新的图片分辨率。
##  参考：1)   YOLOv2 ---> https://github.com/leetenki/YOLOv2
##          yolov2_train.py:train_sizes = [320, 352, 384, 416, 448]
##       2)   RefineNet:
##       3)   py-faster-rcnn


#4、预测框投票、微调法（Box Refinement/Voting 预测框微调/投票法）   推荐指数：￥￥

#5、OHEM 在线难例挖掘  推荐指数：￥￥￥
##  解释：对与RCNN网络得到的候选框进行排序，这样可以保证高效率处理，
##  实际实现中维护了两个Fast-RCNN网络，一个用于产生候选框的预测，
##  另一个用于计算loss，并进行更新，并且进行权重复制以使得两个分支权重同步。

#6、NMS转化为soft NMS函数，可以取得更好的检测效果 推荐指数：￥￥￥


### 其他推荐
#1、更好的先验信息，例如YOLO v3中通过聚类方法得到更好的先验框
#2、更好的预训练模型
#3、更好的超参数（NMS中的IOU阈值，由0.3_～0.5）可以获得更高的mAP，暂无最佳配置～
#https://cloud.tencent.com/developer/article/1101003
